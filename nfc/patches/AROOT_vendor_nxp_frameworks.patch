diff --git a/emvco/Android.bp b/emvco/Android.bp
new file mode 100755
index 0000000..8c9aaad
--- /dev/null
+++ b/emvco/Android.bp
@@ -0,0 +1,18 @@
+//#######################################
+// com.nxp.emvco - library
+//#######################################
+java_library {
+    name: "com.nxp.emvco",
+    installable: true,
+    required: ["com.nxp.emvco.xml"],
+    static_libs: ["android.hardware.emvco-V1-java"],
+    srcs: [
+        "com/**/I*.aidl",
+        "com/**/*.java",
+    ],
+}
+prebuilt_etc {
+    name: "com.nxp.emvco.xml",
+    src: "com.nxp.emvco.xml",
+    sub_dir: "permissions"
+}
diff --git a/emvco/com.nxp.emvco.xml b/emvco/com.nxp.emvco.xml
new file mode 100755
index 0000000..19b213d
--- /dev/null
+++ b/emvco/com.nxp.emvco.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) ????
+-->
+
+<!-- Assist library for NXP EMVCO feature. -->
+<permissions>
+    <library name="com.nxp.emvco"
+        file="/system/framework/com.nxp.emvco.jar" />
+</permissions>
+
diff --git a/emvco/com/nxp/emvco/ConfigType.java b/emvco/com/nxp/emvco/ConfigType.java
new file mode 100644
index 0000000..b218209
--- /dev/null
+++ b/emvco/com/nxp/emvco/ConfigType.java
@@ -0,0 +1,38 @@
+/******************************************************************************
+ *
+ *  Copyright 2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ ******************************************************************************/
+
+package com.nxp.emvco;
+
+public enum ConfigType {
+  POLL_PROFILE_SEL(0),
+  UNKNOWN_KEY(1);
+
+  private final int value;
+  ConfigType(int value) { this.value = value; }
+
+  public int getValue() { return value; }
+
+  public static ConfigType valueOf(int rx_event) {
+    for (ConfigType event : ConfigType.values()) {
+      if (event.ordinal() == rx_event) {
+        return event;
+      }
+    }
+    return UNKNOWN_KEY;
+  };
+}
diff --git a/emvco/com/nxp/emvco/EmvcoEvent.java b/emvco/com/nxp/emvco/EmvcoEvent.java
new file mode 100755
index 0000000..8121ee6
--- /dev/null
+++ b/emvco/com/nxp/emvco/EmvcoEvent.java
@@ -0,0 +1,44 @@
+/******************************************************************************
+ *
+ *  Copyright 2022,2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ ******************************************************************************/
+
+package com.nxp.emvco;
+
+public enum EmvcoEvent {
+  EMVCO_OPEN_CHNL_CPLT_EVT(0),
+  EMVCO_OPEN_CHNL_ERROR_EVT(1),
+  EMVCO_CLOSE_CHNL_CPLT_EVT(2),
+  EMVCO_POOLING_START_EVT(3),
+  EMVCO_POLLING_STARTED_EVT(4),
+  EMVCO_POLLING_STOP_EVT(5),
+  EMVCO_UN_SUPPORTED_CARD_EVT(6),
+  EMVCO_EVENT_UNKNOWN_EVT(7);
+
+  private final int value;
+  EmvcoEvent(int value) { this.value = value; }
+
+  public int getValue() { return value; }
+
+  public static EmvcoEvent valueOf(int rx_event) {
+    for (EmvcoEvent event : EmvcoEvent.values()) {
+      if (event.ordinal() == rx_event) {
+        return event;
+      }
+    }
+    return EMVCO_EVENT_UNKNOWN_EVT;
+  };
+}
diff --git a/emvco/com/nxp/emvco/EmvcoStatus.java b/emvco/com/nxp/emvco/EmvcoStatus.java
new file mode 100755
index 0000000..2125d14
--- /dev/null
+++ b/emvco/com/nxp/emvco/EmvcoStatus.java
@@ -0,0 +1,34 @@
+/******************************************************************************
+ *
+ *  Copyright 2022,2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ ******************************************************************************/
+
+package com.nxp.emvco;
+
+public enum EmvcoStatus {
+  EMVCO_STATUS_OK,
+  EMVCO_STATUS_FAILED,
+  EMVCO_STATUS_UNKNOWN;
+
+  public static EmvcoStatus valueOf(int rx_status) {
+    for (EmvcoStatus status : EmvcoStatus.values()) {
+      if (status.ordinal() == rx_status) {
+        return status;
+      }
+    }
+    return EMVCO_STATUS_UNKNOWN;
+  };
+}
diff --git a/emvco/com/nxp/emvco/IEMVCoClientCallback.java b/emvco/com/nxp/emvco/IEMVCoClientCallback.java
new file mode 100755
index 0000000..3c108e8
--- /dev/null
+++ b/emvco/com/nxp/emvco/IEMVCoClientCallback.java
@@ -0,0 +1,26 @@
+/*
+ *
+ *  Copyright (C) 2022,2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package com.nxp.emvco;
+
+import com.nxp.emvco.EmvcoEvent;
+import com.nxp.emvco.EmvcoStatus;
+public interface IEMVCoClientCallback {
+  void sendData(byte[] data);
+  void sendEvent(EmvcoEvent event, EmvcoStatus status);
+}
diff --git a/emvco/com/nxp/emvco/INfcStateChangeRequestCallback.java b/emvco/com/nxp/emvco/INfcStateChangeRequestCallback.java
new file mode 100755
index 0000000..c0bd9be
--- /dev/null
+++ b/emvco/com/nxp/emvco/INfcStateChangeRequestCallback.java
@@ -0,0 +1,23 @@
+/*
+ *
+ *  Copyright (C) 2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package com.nxp.emvco;
+
+public interface INfcStateChangeRequestCallback {
+  void enableNfc(boolean turnOn);
+}
diff --git a/emvco/com/nxp/emvco/ProfileDiscovery.java b/emvco/com/nxp/emvco/ProfileDiscovery.java
new file mode 100755
index 0000000..8bdd426
--- /dev/null
+++ b/emvco/com/nxp/emvco/ProfileDiscovery.java
@@ -0,0 +1,353 @@
+/*
+ *
+ *  Copyright (C) 2022-2023 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package com.nxp.emvco;
+
+import android.annotation.RequiresPermission;
+import android.content.Context;
+import android.hardware.emvco.DiscoveryMode;
+import android.hardware.emvco.IEmvco;
+import android.hardware.emvco.IEmvcoClientCallback;
+import android.hardware.emvco.IEmvcoProfileDiscovery;
+import android.hardware.emvco.INfcStateChangeRequestCallback;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.util.Log;
+import com.nxp.emvco.EmvcoEvent;
+import com.nxp.emvco.EmvcoStatus;
+import com.nxp.emvco.IEMVCoClientCallback;
+
+public final class ProfileDiscovery {
+  private static final String TAG = ProfileDiscovery.class.getName();
+  private static final int INIT_EMVCO_DELAY_MS = 200;
+  private static final int MAX_RETRY_COUNT = 5;
+  private static int retryCount = 0;
+  private Context mContext;
+  private IEMVCoClientCallback mEMVCoAppClientCallback = null;
+  private static final int TASK_ENABLE_EMVCO_POLL = 1;
+  private ProfileDiscoveryHandler mHandler;
+  private static ProfileDiscovery mProfileDiscovery;
+  private IEmvco mIEmvco;
+  private IEmvcoProfileDiscovery mIEmvcoProfileDiscovery = null;
+  private final EMVCoHalServiceDiedRecipient mEMVCoHalServiceDiedRecipient =
+      new EMVCoHalServiceDiedRecipient();
+  private com.nxp.emvco
+      .INfcStateChangeRequestCallback nfcStateChangeRequestCallback;
+
+  private ProfileDiscovery(Context context) {
+    Log.e(TAG, "ProfileDiscovery");
+    mContext = context;
+    mHandler = new ProfileDiscoveryHandler();
+    Log.i(TAG, "RegisterEMVCoEventListener ");
+    mIEmvcoProfileDiscovery = getEmvcoHalService();
+  }
+
+  public static synchronized ProfileDiscovery getInstance(Context context) {
+    if (mProfileDiscovery == null) {
+      mProfileDiscovery = new ProfileDiscovery(context);
+    }
+    return mProfileDiscovery;
+  }
+
+  private INfcStateChangeRequestCallback.Stub mNfcStateChangeCallback =
+      new INfcStateChangeRequestCallback.Stub() {
+        @Override
+        public void enableNfc(boolean turnOn) {
+          Log.i(TAG, "setNfcState turnOn:" + turnOn);
+          if (nfcStateChangeRequestCallback != null) {
+            nfcStateChangeRequestCallback.enableNfc(turnOn);
+          } else {
+            Log.i(TAG, "setNfcState nfcStateChangeRequestCallback is NULL");
+          }
+        }
+
+        @Override
+        public int getInterfaceVersion() {
+          return this.VERSION;
+        }
+
+        @Override
+        public String getInterfaceHash() {
+          return this.HASH;
+        }
+      };
+
+  final class EMVCoHalServiceDiedRecipient implements IBinder.DeathRecipient {
+    @Override
+    public void binderDied() {
+      Log.e(TAG, "EMVCoHalServiceDiedRecipient binderDied");
+      mIEmvco.asBinder().unlinkToDeath(mEMVCoHalServiceDiedRecipient, 0);
+      mIEmvco = null;
+      mIEmvcoProfileDiscovery = null;
+      if (mEMVCoAppClientCallback != null) {
+        mEMVCoAppClientCallback.sendEvent(EmvcoEvent.EMVCO_CLOSE_CHNL_CPLT_EVT,
+                                          EmvcoStatus.EMVCO_STATUS_OK);
+      } else {
+        Log.i(TAG, "sendEvent is NULL");
+      }
+      Message message = Message.obtain();
+      message.what = TASK_ENABLE_EMVCO_POLL;
+      mHandler.sendMessageDelayed(message, INIT_EMVCO_DELAY_MS);
+    }
+  }
+
+  public void onNfcStateChange(int newState) {
+    Log.i(TAG, "onNfcStateChange newState:" + newState);
+    if (getEmvcoHalService() != null) {
+      try {
+        mIEmvcoProfileDiscovery.onNfcStateChange(newState);
+      } catch (RemoteException e) {
+        Log.e(TAG, "Failed to get EMVCo service " + e);
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+  }
+
+  private IEmvcoClientCallback.Stub mEmvcoHalCallback =
+      new IEmvcoClientCallback.Stub() {
+        @Override
+        public void sendData(byte[] data) {
+          if (mEMVCoAppClientCallback != null) {
+            mEMVCoAppClientCallback.sendData(data);
+          } else {
+            Log.i(TAG, "sendData is NULL");
+          }
+        }
+        @Override
+        public void sendEvent(int event, int status) {
+          if (mEMVCoAppClientCallback != null) {
+            mEMVCoAppClientCallback.sendEvent(EmvcoEvent.valueOf(event),
+                                              EmvcoStatus.valueOf(status));
+          } else {
+            Log.d(TAG, "sendEvent is NULL");
+          }
+        }
+        @Override
+        public int getInterfaceVersion() {
+          return this.VERSION;
+        }
+
+        @Override
+        public String getInterfaceHash() {
+          return this.HASH;
+        }
+      };
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void setEMVCoMode(int technologyToPool, boolean isStartEMVCo) {
+    if (getEmvcoHalService() != null) {
+      try {
+        Log.i(TAG, "setEMVCoMode mode with technologyToPool:" +
+                       technologyToPool + " isStartEMVCo:" + isStartEMVCo);
+        mIEmvcoProfileDiscovery.setEMVCoMode((byte)technologyToPool,
+                                             isStartEMVCo);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+  }
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void setByteConfig(int type, int length, byte value) {
+    if (getEmvcoHalService() != null) {
+      try {
+        Log.i(TAG, "setByteConfig mode with type:" + type + " value:" + value +
+                       "length:" + length);
+        mIEmvcoProfileDiscovery.setByteConfig(type, length, value);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+  }
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void setByteArrayConfig(int type, int length, byte[] value) {
+    if (getEmvcoHalService() != null) {
+      try {
+        Log.i(TAG, "setByteArrayConfig mode with type:" + type +
+                       " value:" + value + "length:" + length);
+        mIEmvcoProfileDiscovery.setByteArrayConfig(type, length, value);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+  }
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void setStringConfig(int type, int length, String value) {
+    if (getEmvcoHalService() != null) {
+      try {
+        Log.i(TAG, "setStringConfig mode with type:" + type +
+                       " value:" + value + "length:" + length);
+        mIEmvcoProfileDiscovery.setStringConfig(type, length, value);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+  }
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public int getCurrentDiscoveryMode() {
+    int status = DiscoveryMode.UN_KNOWN;
+    if (getEmvcoHalService() != null) {
+      try {
+        status = mIEmvcoProfileDiscovery.getCurrentDiscoveryMode();
+        Log.i(TAG, "getCurrentDiscoveryMode:" + status);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+        return status;
+      }
+    } else {
+      Log.d(TAG, "Please check if HAL service is up"
+                     + " and retry after some time");
+    }
+    return status;
+  }
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void registerEventListener(IEMVCoClientCallback mEMVCoCallback)
+      throws SecurityException {
+    final int uid = android.os.Process.myUid();
+    if (uid == android.os.Process.NFC_UID) {
+      throw new SecurityException(
+          "For security reasons, NFC process not allowed to listen for EMVCo data");
+    }
+    if (getEmvcoHalService() != null && mEMVCoCallback != null) {
+      mEMVCoAppClientCallback = mEMVCoCallback;
+      try {
+        mIEmvcoProfileDiscovery.registerEMVCoEventListener(mEmvcoHalCallback);
+      } catch (RemoteException e) {
+        Log.e(TAG, "Failed to get EMVCo service " + e);
+      }
+    } else {
+      Log.e(
+          TAG,
+          "App has not registered callback. Either EMVCO service not available or App callback is NULL");
+    }
+  }
+
+  @RequiresPermission(android.Manifest.permission.NFC)
+  public void
+  registerNFCStateChangeCallback(com.nxp.emvco.INfcStateChangeRequestCallback
+                                     iNfcStateChangeRequestCallback)
+      throws SecurityException {
+    Log.i(TAG, "registerNFCStateChangeCallback");
+    final int uid = android.os.Process.myUid();
+    if (uid != android.os.Process.NFC_UID) {
+      throw new SecurityException(
+          "For security reasons, only NFC process allowed to listen for this callback");
+    }
+
+    if (getEmvcoHalService() != null &&
+        iNfcStateChangeRequestCallback != null) {
+      try {
+        nfcStateChangeRequestCallback = iNfcStateChangeRequestCallback;
+        boolean status = mIEmvcoProfileDiscovery.registerNFCStateChangeCallback(
+            mNfcStateChangeCallback);
+        Log.d(TAG, "Register NfcStateChangeCallback status:" + status);
+      } catch (RemoteException e) {
+        Log.e(TAG, "Failed to get EMVCo service " + e);
+      }
+    } else {
+      Log.d(
+          TAG,
+          "App has not registered callback. Either EMVCO service not available or INfcStateChangeRequestCallback callback is NULL");
+    }
+  }
+
+  /** get handle to EMVCo HAL service interface */
+  private IEmvcoProfileDiscovery getEmvcoHalService() {
+    /* get a handle to EMVCo service */
+    if (mIEmvcoProfileDiscovery != null) {
+      return mIEmvcoProfileDiscovery;
+    }
+    IBinder service =
+        ServiceManager.getService("android.hardware.emvco.IEmvco/default");
+    if (service != null) {
+      try {
+        service.linkToDeath(mEMVCoHalServiceDiedRecipient, 0);
+        mIEmvco = IEmvco.Stub.asInterface(service);
+        mIEmvcoProfileDiscovery = mIEmvco.getEmvcoProfileDiscoveryInterface();
+      } catch (RemoteException e) {
+        Log.d(TAG, "Unable to register death recipient");
+      }
+
+    } else {
+      Log.d(TAG, "Unable to acquire EMVCo HAL service");
+    }
+    return mIEmvcoProfileDiscovery;
+  }
+
+  final class ProfileDiscoveryHandler extends Handler {
+    @Override
+    public void handleMessage(Message msg) {
+      switch (msg.what) {
+      case TASK_ENABLE_EMVCO_POLL: {
+        Log.i(TAG, "TASK_ENABLE_EMVCO_POLL received");
+        mIEmvcoProfileDiscovery = getEmvcoHalService();
+        if (mIEmvcoProfileDiscovery != null) {
+          try {
+            final int uid = android.os.Process.myUid();
+            boolean status = false;
+            if (uid == android.os.Process.NFC_UID) {
+              status = mIEmvcoProfileDiscovery.registerNFCStateChangeCallback(
+                  mNfcStateChangeCallback);
+              Log.d(TAG, "Register NfcStateChangeCallback status:" + status);
+            } else {
+              status = mIEmvcoProfileDiscovery.registerEMVCoEventListener(
+                  mEmvcoHalCallback);
+              Log.d(TAG,
+                    "Register registerEMVCoEventListener status:" + status);
+            }
+            if (nfcStateChangeRequestCallback != null) {
+              nfcStateChangeRequestCallback.enableNfc(true);
+            }
+          } catch (RemoteException e) {
+            Log.e(TAG, "Failed to send onNfcStateChange");
+          }
+        } else {
+          if (retryCount++ <= MAX_RETRY_COUNT) {
+            Log.e(
+                TAG,
+                "EMVCO service not up after crash. Retrying to register listener with EMVCo HAL");
+            Message message = Message.obtain();
+            message.what = TASK_ENABLE_EMVCO_POLL;
+            mHandler.sendMessageDelayed(message, INIT_EMVCO_DELAY_MS);
+          }
+        }
+        break;
+      }
+      }
+    }
+  }
+}
